#version 430
/*
	**Luminance Reduction Shader**

	File Name	: LumReduction.comp
	Author		: Bora Yalciner
	Description	:

		Luminance Reduction shader is a parallel reduction shader
		that generates average luminance (although only adds luminance,
		division should be done outside of the kernel) and
		Max luminance value of the image.

		It assumes image is RGB[A] format and it converts It to YCbCr
		color space and uses Y as Luminance value.

*/

// Defines
#define U_RES layout(location = 0)

#define T_IN_HDR_IMAGE layout(binding = 0)

#define SSB_OUTPUT layout(std430, binding = 0) coherent volatile

// WorkGroup Dimension
#define WORK_X 256

// Textures
uniform T_IN_HDR_IMAGE sampler2D tInImage;

// SSBOs
SSB_OUTPUT buffer LuminanceData
{
	uint outMaxLum;
	uint outAvgLum;
};

// Uniforms
U_RES uniform ivec2 resolution;

// Shared Memory
shared float reduceBuffer[WORK_X];

// Functions
float ComputeLuminance(in vec4 color)
{
    // https://en.wikipedia.org/wiki/Relative_luminance
    // RBG should be in linear space
    return (0.2120f * color.r +
            0.7150f * color.g +
            0.0722f * color.b);
}

void AtomicAddToSSBO(float val)
{
	// CAS Atomic operation for Atomic Max for floats
	// https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomic-functions
	uint assumed;
	uint old = outMaxLum;
	do
	{
		assumed = old;
		uint newVal = floatBitsToUint(uintBitsToFloat(assumed) + val);
		old = atomicCompSwap(outAvgLum, assumed, newVal);
	} while(assumed != old);
}

void AtomicMaxToSSBO(float val)
{
	// CAS Atomic operation for Atomic Max for floats
	// https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomic-functions
	uint assumed;
	uint old = outMaxLum;
	do
	{
		assumed = old;
		uint newVal = floatBitsToUint(max(uintBitsToFloat(assumed),val));
		old = atomicCompSwap(outMaxLum, assumed, newVal);
	} while(assumed != old);
}

void ReduceBlock(out float maxLum, out float avgLum,
				 in float lum)
{
	uint localId = gl_LocalInvocationID.x;

	// Unrolled parallel reduction using shared mem
	reduceBuffer[localId] = log(0.001f + lum);
	memoryBarrierShared(); barrier();
	if(localId < 128) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 128];
	memoryBarrierShared(); barrier();
	if(localId < 64) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 64];
	memoryBarrierShared(); barrier();
	if(localId < 32) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 32];
	memoryBarrierShared(); barrier();
	if(localId < 16) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 16];
	memoryBarrierShared(); barrier();
	if(localId < 8) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 8];
	memoryBarrierShared(); barrier();
	if(localId < 4) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 4];
	memoryBarrierShared(); barrier();
	if(localId < 2) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 2];
	memoryBarrierShared(); barrier();
	if(localId < 1) reduceBuffer[localId] = reduceBuffer[localId] + reduceBuffer[localId + 1];
	memoryBarrierShared(); barrier();
	if(localId == 0) avgLum = reduceBuffer[localId];
	// Do this for max as well
	reduceBuffer[localId] = lum;
	memoryBarrierShared(); barrier();
	if(localId < 128) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 128]);
	memoryBarrierShared(); barrier();
	if(localId < 64) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 64]);
	memoryBarrierShared(); barrier();
	if(localId < 32) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 32]);
	memoryBarrierShared(); barrier();
	if(localId < 16) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 16]);
	memoryBarrierShared(); barrier();
	if(localId < 8) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 8]);
	memoryBarrierShared(); barrier();
	if(localId < 4) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 4]);
	memoryBarrierShared(); barrier();
	if(localId < 2) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 2]);
	memoryBarrierShared(); barrier();
	if(localId < 1) reduceBuffer[localId] = max(reduceBuffer[localId], reduceBuffer[localId + 1]);
	memoryBarrierShared(); barrier();
	if(localId == 0) maxLum = reduceBuffer[localId];
}

// 16x16 block is always nice
layout (local_size_x = WORK_X, local_size_y = 1, local_size_z = 1) in;
void main(void)
{
	// Call logic is per pixel
	uint globalId = gl_GlobalInvocationID.x;
	// Generate pixelIds
	ivec2 pixId = ivec2(globalId % uint(resolution[0]),
						globalId / uint(resolution[0]));

	// Skip out of image threads
	float luminance = 0.0f;
	if(all(lessThan(pixId, resolution)))
	{
		// Read from current buffer buffers
		vec4 colorIn = texelFetch(tInImage, pixId, 0);
		luminance = ComputeLuminance(colorIn);
	}
	// Do parallel reduction
	float maxLum = 0, avgLum = 0;
	ReduceBlock(maxLum, avgLum, luminance);

	// Local main thread will write to global memory
	// in an atomic manner.
	// Normally for large images that does not fit into single block
	// (which most of the images are) you call this function again
	// with a newly generated image (but it is more complex)
	// instead we atomically combine each blocks result
	if(gl_LocalInvocationID.x == 0u)
	{
		// No support for float atomics
		// Create your own using atomicCAS
		AtomicAddToSSBO(avgLum);
		AtomicMaxToSSBO(maxLum);
	}
}