#version 430
/*
	**Accumulate Input Generic Shader**

	File Name	: AccumInput.comp
	Author		: Bora Yalciner
	Description	:

		Shader Averages the current image that is
		being displayed with the new image that is
		brought by Tracer System.

		It supports sub image averaging etc.
*/

// Defines
#define I_OUT_COLOR layout(binding = 0) restrict writeonly
#define I_SAMPLE layout(r32ui, binding = 1) restrict

#define U_RES layout(location = 0)
#define U_START layout(location = 1)
#define U_END layout(location = 2)

#define T_IN_COLOR layout(binding = 0)
#define T_IN_BUFFER layout(binding = 1)
#define T_IN_SAMPLE layout(binding = 2)

// Images
uniform I_OUT_COLOR image2D iColor;
uniform I_SAMPLE uimage2D iSample;

// Textures
uniform T_IN_COLOR sampler2D tInColor;
uniform T_IN_SAMPLE usampler2D tInSample;
uniform T_IN_BUFFER sampler2D tInBuffer;

// Uniforms
U_RES uniform ivec2 resolution;
U_START uniform ivec2 start;
U_END uniform ivec2 end;

// 16x16 block is always nice
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(void)
{
	// Call logic is per pixel
	uvec2 globalId = gl_GlobalInvocationID.xy;
	// Generate pixelIds
	ivec2 pixIdOut = ivec2(globalId);
	ivec2 pixIdIn = ivec2(globalId) - start;

	if(any(greaterThanEqual(globalId, resolution))) return;

	// Read from current color buffers
	vec4 colorIn = texelFetch(tInColor, pixIdOut, 0);

	vec4 colorOut = colorIn;
	if(all(greaterThanEqual(pixIdOut, start)) &&
	   all(lessThan(pixIdOut, end)))
	{
		// We are at pixel update range
		// Do update
		uint sampleCount = imageLoad(iSample, pixIdOut).x;
		// Read the requested from
		vec4 bufferIn = texelFetch(tInBuffer, pixIdIn, 0);
		uint sampleIn = texelFetch(tInSample, pixIdIn, 0).x;
		// Calculate
		uint totalSamples = sampleCount + sampleIn;

		if(totalSamples != 0)
		{
			colorOut = (sampleCount * colorIn + bufferIn) / float(totalSamples);

			// Set new sample count
			imageStore(iSample, pixIdOut, ivec4(totalSamples));
		}
	}
	// Copy
	imageStore(iColor, pixIdOut, colorOut);
}