#version 430
/*
	**PG Reference Render Shader**

	File Name	: DTreeRender.vert
	Author		: Bora Yalciner
	Description	:

*/

// Definitions
// Defines
#define U_RES layout(location = 0)
#define U_LOG_ON layout(location = 1)

#define T_IN_LUM_TEX layout(binding = 0)
#define T_IN_GRAD_TEX layout(binding = 1)

#define I_OUT_REF_IMAGE layout(binding = 0) restrict writeonly

#define UB_MAX_LUM layout(std140, binding = 0)

// WorkGroup Dimension
#define WORK_X 16
#define WORK_Y 16

// UBOs
UB_MAX_LUM uniform MaxLuminanceData
{
	float maxLum;
};

// Uniforms
U_RES uniform uvec2 resolution;
U_LOG_ON uniform bool doLogScale;
// Textures
uniform T_IN_LUM_TEX sampler2D tLum;
uniform T_IN_GRAD_TEX sampler2D tGrad;
// Images
uniform I_OUT_REF_IMAGE image2D iRefOut;

// 16x16 block is always nice
layout (local_size_x = WORK_X, local_size_y = WORK_Y, local_size_z = 1) in;
void main(void)
{
	// Call logic is per pixel
	uvec2 globalId = gl_GlobalInvocationID.xy;
	// Generate pixelIds
	ivec2 pixId = ivec2(globalId);

	// Skip out of image threads
	if(any(greaterThanEqual(globalId, resolution))) return;

	// Fetch Lum Value
	float lum = texelFetch(tLum, pixId, 0).x;
	// Gradient Coords
	float u;
	// Do logarithmic scale if requested
	if(doLogScale)
		u = log(1 + lum) / log(1 + maxLum);
	else
		u = (lum / maxLum);
	vec2 uv = vec2(u, 0.5f);

	// Gradient data
	vec3 gradValue = texture(tGrad, uv).xyz;

	vec4 pixVal = (lum == 0.0f)
					? vec4(vec3(0.1f), 1.0f)
					: vec4(gradValue, 1.0f);

	// Store to the Image
	// Prevent NaNs
	if(isnan(lum) || isinf(lum))
		imageStore(iRefOut, pixId, vec4(1.0f));
	else
		imageStore(iRefOut, pixId, pixVal);
}